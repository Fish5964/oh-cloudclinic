<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geeke.stock.dao.InventoryVerificationDao">
    
    <sql id="inventoryVerificationColumns">
        a.id AS "id",
        a.company_id AS "company.id",
        IFNULL(company.name,'') AS "company.name",
        a.code AS "code",
        a.create_by AS "createBy",
        a.create_date AS "createDate",
        a.update_by AS "updateBy",
        a.update_date AS "updateDate",
        a.status AS "status",
        a.type AS "type",
        a.all_price AS "allPrice"
    </sql>
    
    <sql id="inventoryVerificationJoins">
        LEFT JOIN org_company company ON company.id = a.company_id
    </sql>
    
    <select id="get" resultType="com.geeke.stock.entity.InventoryVerification">
        SELECT 
            <include refid="inventoryVerificationColumns"/>
        FROM inventory_verification a
        <include refid="inventoryVerificationJoins"/>
        WHERE a.id = #{id}
    </select>
    
    <select id="count" resultType="int">
        SELECT COUNT(*) FROM inventory_verification a
        <include refid="inventoryVerificationJoins"/>
        <where>
            1=1
            AND a.id > 0
            
            <include refid="Common.whereParams"/>
        </where>
    </select>    
    
    <select id="listPage" resultType="com.geeke.stock.entity.InventoryVerification">
        SELECT 
            <include refid="inventoryVerificationColumns"/>
        FROM inventory_verification a
        <include refid="inventoryVerificationJoins"/>
        <where>
            1=1
            AND a.id > 0
            
            <include refid="Common.whereParams"/>
        </where>
        <choose>
            <when test="order != null and order != ''">
                ORDER BY ${order}
            </when>            
            <otherwise>
                ORDER BY a.update_date DESC
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>
    
    <select id="listAll" resultType="com.geeke.stock.entity.InventoryVerification">
        SELECT 
            <include refid="inventoryVerificationColumns"/>
        FROM inventory_verification a
        <include refid="inventoryVerificationJoins"/>
        <where>
            1=1
            AND a.id > 0
            
            <include refid="Common.whereParams"/>
        </where>
        <choose>
            <when test="order != null and order != ''">
                ORDER BY ${order}
            </when>
            <otherwise>
                ORDER BY a.update_date DESC
            </otherwise>
        </choose>
    </select>
    <select id="getByCompanyId" resultType="com.geeke.stock.entity.InventoryVerification">
        SELECT
            <include refid="inventoryVerificationColumns"/>
        FROM inventory_verification a
            <include refid="inventoryVerificationJoins"/>
        where a.company_id=#{companyId} and a.status=#{status}
    </select>

    <insert id="insert">
        INSERT INTO inventory_verification(
            id,
            company_id,
            code,
            create_by,
            create_date,
            update_by,
            update_date,
            status,
            type,
            all_price
        ) VALUES (
            #{id},
            #{company.id},                    
            #{code},
            #{createBy},
            #{createDate},
            #{updateBy},
            #{updateDate},
            #{status},
            #{type},
            0
        )
    </insert>
    
    <update id="update">
        UPDATE inventory_verification SET     
            code = #{code},
            create_date = #{createDate}
        WHERE id = #{id}
    </update>
    
    <update id="delete">
        DELETE FROM inventory_verification
        WHERE id = #{id}
    </update>
        
    <insert id="bulkInsert" parameterType="java.util.List">
        INSERT INTO inventory_verification(
            id,
            company_id,
            code,
            create_by,
            create_date,
            update_by,
            update_date,
            status,
            type,
            all_price
        ) VALUES 
        <foreach collection="entitys" index="index" item="entity" open="" separator="," close="">
        (
            #{entity.id},
            #{entity.company.id},                    
            #{entity.code},
            #{entity.createBy},
            #{entity.createDate},
            #{entity.updateBy},
            #{entity.updateDate},
            #{entity.status},
            #{entity.type},
            #{entity.allPrice}
        )
        </foreach>
    </insert>
    
    <update id="bulkUpdate" parameterType="java.util.List">    
        UPDATE inventory_verification
        <set>           
            <trim prefix="code=case" suffix="end,">
                <foreach collection="entitys" item="entity" index="index">
                    when id=#{entity.id} then #{entity.code}
                </foreach>
            </trim>
            <trim prefix="create_date=case" suffix="end,">
                <foreach collection="entitys" item="entity" index="index">
                    when id=#{entity.id} then #{entity.createDate}
                </foreach>
            </trim>
        </set>
        WHERE id IN
        <foreach collection="entitys" item="entity" index="index" separator="," open="(" close=")">
            #{entity.id}
        </foreach>
    </update>
    
    
    <update id="bulkDelete" parameterType="java.util.List">
        DELETE FROM inventory_verification
        WHERE id IN
        <foreach collection="entitys" item="entity" index="index" separator="," open="(" close=")">
            #{entity.id}
        </foreach>
    </update>
    <update id="accomplishInventoryVerification">
        update inventory_verification set status='1' where id=#{id}
    </update>
    <update id="updateAllPrice">
        update inventory_verification set all_price=#{allPrice} where id=#{id}
    </update>

</mapper>