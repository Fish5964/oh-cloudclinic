<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.geeke.stock.dao.SupplierOutboundDao">

    <sql id="supplierOutboundColumns">
        a.id AS "id",
        a.company_id "company.id",
        a.supplier_id "supplier.id",
        a.code,
        a.breed,
        a.number,
        a.all_bid "allBid",
        a.all_retail_price "allRetailPrice",
        a.cancel_date "cancelDate",
        a.examine_by "examineBy",
        a.examine_date "examineDate",
        a.status,
        a.reason,
        a.remarks,
        a.create_by "createBy",
        a.create_date "createDate",
        a.update_by "updateBy",
        a.update_date "updateDate",
        a.method,
        a.type
    </sql>

    <sql id="supplierOutboundJoins">

    </sql>

    <select id="getCode" resultType="String">
        SELECT
        a.code
        FROM
        supplier_outbound a
        WHERE
        a.company_id = #{companyId}
        ORDER BY create_date DESC
        limit 1
    </select>


    <insert id="insert">
        INSERT INTO supplier_outbound(
            id,
            company_id,
            supplier_id,
            code,
            breed,
            number,
            all_bid,
            all_retail_price,
            cancel_date,
            examine_by,
            examine_date,
            status,
            reason,
            remarks,
            create_by,
            create_date,
            update_by,
            update_date,
            method,
            type
        ) VALUES (
            #{id},
            #{company.id},
            #{supplier.id},
            #{code},
            #{breed},
            #{number},
            #{allBid},
            #{allRetailPrice},
            #{cancelDate},
            #{examineBy},
            #{examineDate},
            #{status},
            #{reason},
            #{remarks},
            #{createBy},
            #{createDate},
            #{updateBy},
            #{updateDate},
            #{method},
            #{type}
        )
    </insert>


    <update id="update">
        UPDATE supplier_outbound SET
        <choose>
            <when test="company != null">
                company_id = #{company.id},
            </when>
            <otherwise>
                company_id = 0,
            </otherwise>
        </choose>
        <choose>
            <when test="supplier != null">
                supplier_id=#{supplier.id},
            </when>
            <otherwise>
                supplier_id=0,
            </otherwise>
        </choose>
            breed = #{breed},
            `number` = #{number},
            all_bid = #{allBid},
            all_retail_price = #{allRetailPrice},
            method = #{method},
            remarks = #{remarks},
            reason = #{reason}
        WHERE id = #{id}
    </update>

    <update id="examinee">
        UPDATE supplier_outbound SET
        examine_by = #{examineBy},
        examine_date = #{examineDate},
        status = #{status}
        WHERE id = #{id}
    </update>
    <update id="cancel">
        UPDATE supplier_outbound SET
        status = #{status}
        WHERE id = #{id}
    </update>
    <select id="get" resultType="com.geeke.stock.entity.SupplierOutbound">
        SELECT
        <include refid="supplierOutboundColumns"/>
        FROM supplier_outbound a
        <include refid="supplierOutboundJoins"/>
        WHERE a.id = #{id}
    </select>


    <select id="count" resultType="int">
        SELECT COUNT(*) FROM supplier_outbound a
        <include refid="supplierOutboundJoins"/>
        <where>
            1=1
            AND a.id > 0
            <include refid="Common.whereParams"/>
        </where>
    </select>

    <select id="listPage" resultType="com.geeke.stock.entity.SupplierOutbound">
        SELECT
        <include refid="supplierOutboundColumns"/>
        FROM supplier_outbound a
        <include refid="supplierOutboundJoins"/>
        <where>
            1=1
            AND a.id > 0
            <include refid="Common.whereParams"/>
        </where>
        <choose>
            <when test="order != null and order != ''">
                ORDER BY ${order}
            </when>
            <otherwise>
                ORDER BY a.update_date DESC
            </otherwise>
        </choose>
        LIMIT #{limit} OFFSET #{offset}
    </select>
</mapper>